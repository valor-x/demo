-
    if (theme.search.enable) {
        var localSearch = 'undefined';
        var algolia = 'undefined';
        switch (theme.search.type) {
            case 'local':
                localSearch = JSON.stringify({
                    preload: theme.search.local.preload,
                    path: theme?.search?.local?.CDN || '/search.xml'
                });
                break;
            case 'algolia':
                algolia = JSON.stringify({
                    appId: config.algolia.appId || config.algolia.applicationID,
                    apiKey: config.algolia.apiKey,
                    indexName: config.algolia.indexName,
                    hits: {
                        per_page: theme?.search?.algolia?.hits?.per_page || 10
                    }
                });
                break;
        }
    }

    let translate = 'undefined';
    if (theme.translate && theme.translate.enable) {
        translate = JSON.stringify({
            defaultEncoding: theme.translate.defaultEncoding,
            translateDelay: theme.translate.translateDelay,
        });
    }

    const commentInfoStart = theme.comment.randomInfoStart.map(item => `"${item}"`) || [];
    const commentInfoEnd = theme.comment.randomInfoEnd.map(item => `"${item}"`) || [];
    const sayhello2 = theme.aside.card.sayhello2.map(item => `"${item}"`) || [];

script.
    const GLOBAL_CONFIG = {
        root: '!{config.root}',
        algolia: !{algolia ? algolia : 'undefined'},
        localsearch: !{localSearch ? localSearch : 'undefined'},
        runtime: '!{theme.aside.siteinfo.runtimeenable ? theme.aside.siteinfo.runtime : false}',
        lazyload: {
            enable: !{theme.lazyload.enable},
            error: '!{theme.lazyload.errorimg}'
        },
        hightlight: {
            enable: !{theme.hightlight.enable},
            limit: !{theme.hightlight.hightlimit},
            expand: !{theme.hightlight.expand},
            copy: !{theme.hightlight.copy},
        },
        randomlinks: !{theme.footer.randomlink},
        lang: {
            theme: {
                dark: '!{_p('theme.dark')}',
                light: '!{_p('theme.light')}',
            },
            copy: {
                success: '!{_p('copy.success')}',
                error: '!{_p('copy.error')}',
            },
            backtop: '!{_p('nav.backtop')}',
            time: {
                recent: '!{_p('time.recent')}',
                yesterday: '!{_p('time.yesterday')}',
                berforeyesterday: '!{_p('time.berforeyesterday')}',
                daybefore: '!{_p('time.daybefore')}',
                runtime: '!{_p('time.runtime')}',
            },
            search: {
                empty: '!{_p('search.empty')}',
                hit: '!{_p('search.hit')}',
                placeholder: '!{_p('search.placeholder')}',
            },
            chs: {
                chs_to_cht: '!{_p('chs.chs_tw')}',
                cht_to_chs: '!{_p('chs.chs_cn')}',
            }
        },
        aside: {
            sayhello: {
                morning: '!{theme.aside.card.sayhello.morning}',
                noon: '!{theme.aside.card.sayhello.noon}',
                afternoon: '!{theme.aside.card.sayhello.afternoon}',
                night: '!{theme.aside.card.sayhello.night}',
                goodnight: '!{theme.aside.card.sayhello.goodnight}',
            },
            sayhello2: [!{sayhello2}],
        },
        covercolor: {
            enable: !{theme.post.covercolor.enable}
        },
        comment: {
            enable: !{theme.comment.enable},
            type: '!{theme.comment.type}',
            commentBarrage: !{theme.comment.commentBarrage && theme.comment.enable},
            randomInfoStart: [!{commentInfoStart}],
            randomInfoEnd: [!{commentInfoEnd}],
            twikoo: {
                url: '!{theme.comment.twikoo.envId}',
                accessToken: '!{theme.comment.twikoo.accessToken}'
            },
            waline: {
                url: '!{theme.comment.waline.envId}',
            }
        },
        lightbox: '!{ theme.mediumZoom ? "mediumZoom" : (theme.fancybox ? "fancybox" : "null")}',
        rightside: {
            enable: !{theme.rightside.enable}
        },
        ai: {
            enable: !{theme.post_ai.enable},
            key: '!{theme.post_ai.key}',
            talk: '!{theme.post_ai.talk}',
            randomPost: !{theme.post_ai.randomPost},
        },
        music: {
            enable: !{theme.music.enable},
        },
        translate: !{translate},
    };